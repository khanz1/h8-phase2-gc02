// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator zod {
  provider = "zod-prisma"
  output   = "../src/defs/zod"
}

enum UserRole {
  Admin
  Staff
}

model User {
  /// @zod.optional()
  id          Int      @id @default(autoincrement())
  username    String?
  /// @zod.email()
  email       String   @unique
  /// @zod.min(5)
  password    String
  /// @zod.optional()
  role        UserRole @default(Staff)
  phoneNumber String?
  address     String?
  /// @zod.optional()
  createdAt   DateTime @default(now())
  /// @zod.optional()
  updatedAt   DateTime @updatedAt

  Blog_Post             Blog_Post[]
  Branded_Product       Branded_Product[]
  Movie_Movie           Movie_Movie[]
  Rental_Transportation Rental_Transportation[]
  Room_Lodging          Room_Lodging[]
  News_Article          News_Article[]
  Career_Job            Career_Job[]
  Restaurant_Cuisine    Restaurant_Cuisine[]

  @@map("Users")
}

model Blog_Category {
  /// @zod.optional()
  id        Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  name      String
  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt

  Posts Blog_Post[]

  @@map("Blog_Categories")
}

model Blog_Post {
  /// @zod.optional()
  id         Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  title      String
  /// @zod.trim().min(1, { message: "must not be empty" })
  content    String
  /// @zod.optional()
  imgUrl     String?
  categoryId Int
  authorId   Int
  /// @zod.optional()
  createdAt  DateTime @default(now())
  /// @zod.optional()
  updatedAt  DateTime @updatedAt

  Category Blog_Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User     User          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Blog_Posts")
}

model Branded_Category {
  /// @zod.optional()
  id        Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  name      String
  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt

  Products Branded_Product[]

  @@map("Branded_Categories")
}

model Branded_Product {
  /// @zod.optional()
  id          Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  name        String
  /// @zod.trim().min(1, { message: "must not be empty" })
  description String
  /// @zod.min(1)
  price       Int
  stock       Int?
  imgUrl      String?
  categoryId  Int
  authorId    Int
  /// @zod.optional()
  createdAt   DateTime @default(now())
  /// @zod.optional()
  updatedAt   DateTime @updatedAt

  Category Branded_Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User     User             @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Branded_Products")
}

model Movie_Genre {
  /// @zod.optional()
  id        Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  name      String
  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt

  Movies Movie_Movie[]

  @@map("Movie_Genres")
}

model Movie_Movie {
  /// @zod.optional()
  id         Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  title      String
  /// @zod.trim().min(1, { message: "must not be empty" })
  synopsis   String
  trailerUrl String?
  imgUrl     String?
  /// @zod.min(1)
  rating     Int
  genreId    Int
  authorId   Int
  /// @zod.optional()
  createdAt  DateTime @default(now())
  /// @zod.optional()
  updatedAt  DateTime @updatedAt

  Genre Movie_Genre @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User  User        @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Movie_Movies")
}

model Rental_Type {
  /// @zod.optional()
  id        Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  name      String
  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt

  Transportations Rental_Transportation[]

  @@map("Rental_Types")
}

model Rental_Transportation {
  /// @zod.optional()
  id          Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  name        String
  /// @zod.trim().min(1, { message: "must not be empty" })
  description String
  imgUrl      String?
  location    String?
  /// @zod.min(1)
  price       Int
  typeId      Int
  authorId    Int
  /// @zod.optional()
  createdAt   DateTime @default(now())
  /// @zod.optional()
  updatedAt   DateTime @updatedAt

  Type Rental_Type @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User User        @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Rental_Transportations")
}

model Room_Type {
  /// @zod.optional()
  id        Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  name      String
  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt

  Lodgings Room_Lodging[]

  @@map("Room_Types")
}

model Room_Lodging {
  /// @zod.optional()
  id           Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  name         String
  /// @zod.trim().min(1, { message: "must not be empty" })
  facility     String
  roomCapacity Int
  /// @zod.url()
  imgUrl       String
  location     String
  typeId       Int
  authorId     Int
  /// @zod.optional()
  createdAt    DateTime @default(now())
  /// @zod.optional()
  updatedAt    DateTime @updatedAt

  Type Room_Type @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Room_Lodgings")
}

model News_Category {
  /// @zod.optional()
  id        Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  name      String
  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt

  Articles News_Article[]

  @@map("News_Categories")
}

model News_Article {
  /// @zod.optional()
  id         Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  title      String
  /// @zod.trim().min(1, { message: "must not be empty" })
  content    String
  imgUrl     String?
  categoryId Int
  authorId   Int
  /// @zod.optional()
  createdAt  DateTime @default(now())
  /// @zod.optional()
  updatedAt  DateTime @updatedAt

  Category News_Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User     User          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("News_Articles")
}

model Career_Company {
  /// @zod.optional()
  id          Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  name        String
  companyLogo String
  location    String
  email       String
  description String
  /// @zod.optional()
  createdAt   DateTime @default(now())
  /// @zod.optional()
  updatedAt   DateTime @updatedAt

  Jobs Career_Job[]

  @@map("Career_Companies")
}

model Career_Job {
  /// @zod.optional()
  id          Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  title       String
  /// @zod.trim().min(1, { message: "must not be empty" })
  description String
  imgUrl      String
  jobType     String
  companyId   Int
  authorId    Int
  /// @zod.optional()
  createdAt   DateTime @default(now())
  /// @zod.optional()
  updatedAt   DateTime @updatedAt

  Company Career_Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User    User           @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Career_Jobs")
}

model Restaurant_Category {
  /// @zod.optional()
  id        Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  name      String
  /// @zod.optional()
  createdAt DateTime @default(now())
  /// @zod.optional()
  updatedAt DateTime @updatedAt

  Cuisines Restaurant_Cuisine[]

  @@map("Restaurant_Categories")
}

model Restaurant_Cuisine {
  /// @zod.optional()
  id          Int      @id @default(autoincrement())
  /// @zod.trim().min(1, { message: "must not be empty" })
  name        String
  /// @zod.trim().min(1, { message: "must not be empty" })
  description String
  /// @zod.min(1)
  price       Int
  imgUrl      String
  categoryId  Int
  authorId    Int
  /// @zod.optional()
  createdAt   DateTime @default(now())
  /// @zod.optional()
  updatedAt   DateTime @updatedAt

  Category Restaurant_Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User     User                @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Restaurant_Cuisines")
}
