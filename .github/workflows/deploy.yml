name: CI/CD ‚Üí AWS EC2

on:
  push:
    branches:
      - production

jobs:
  deploy:
    runs-on: ubuntu-24.04

    steps:
      # 1) Checkout your code
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Set up Node.js for testing
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      # 3) Install dependencies & run tests
      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      # 3.5) Prepare environment setup
      - name: Verify Environment Setup
        run: |
          # Ensure deployment setup script exists and is executable
          chmod +x scripts/deploy-setup.sh
          # Verify env.example exists for reference
          ls -la env.example

      # 4) Log in to Docker Hub
      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5) Build & push the Docker image (using your Dockerfile)
      - name: Build & Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile # explicitly reference your Dockerfile
          target: production
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/phase2-graded-challenge:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/phase2-graded-challenge:${{ github.sha }}

      # 6) SSH into EC2 and deploy
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Create app directory and environment file
            mkdir -p ~/app
            cat << 'EOF' > ~/app/.env
            ${{ secrets.PROD_ENV_FILE }}
            EOF

            # Ensure PORT is set to 8001
            echo "PORT=8001" >> ~/app/.env

            # Pull latest application image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/phase2-graded-challenge:latest

            # Stop and remove existing containers with better error handling
            echo "üîÑ Checking for existing containers..."
            if docker ps -a --format "table {{.Names}}" | grep -q "phase2-app"; then
              echo "üõë Stopping existing phase2-app container..."
              docker stop phase2-app
              echo "üóëÔ∏è Removing existing phase2-app container..."
              docker rm phase2-app
            else
              echo "‚ÑπÔ∏è No existing phase2-app container found (this is normal for first deployment)"
            fi

            if docker ps -a --format "table {{.Names}}" | grep -q "phase2-postgres"; then
              echo "‚ÑπÔ∏è PostgreSQL container already exists"
            else
              echo "üöÄ Starting PostgreSQL database..."
              docker run -d \
                --name phase2-postgres \
                --restart unless-stopped \
                -e POSTGRES_DB=phase2_challenge \
                -e POSTGRES_USER=postgres \
                -e POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} \
                -v postgres_data:/var/lib/postgresql/data \
                -p 5432:5432 \
                postgres:15-alpine
              
              echo "‚è≥ Waiting for PostgreSQL to be ready..."
              sleep 15
              echo "‚úÖ PostgreSQL setup completed"
            fi

            # Start the main application
            echo "üöÄ Starting phase2-graded-challenge application..."
            docker run -d \
              --name phase2-app \
              --restart unless-stopped \
              --env-file ~/app/.env \
              --link phase2-postgres:postgres \
              -p 8001:8001 \
              -v ~/app/uploads:/app/uploads \
              -v ~/app/logs:/app/logs \
              ${{ secrets.DOCKERHUB_USERNAME }}/phase2-graded-challenge:latest

            # Wait for application to be ready
            echo "‚è≥ Waiting for application to be ready..."
            sleep 15

            # Run database migrations
            echo "üîÑ Running database migrations..."
            docker exec phase2-app npm run db:migrate

            # Check application health
            if curl -f http://localhost:8001/health > /dev/null 2>&1; then
              echo "‚úÖ Application is healthy and running on port 8001"
            else
              echo "‚ö†Ô∏è Application health check failed, checking logs..."
              docker logs phase2-app --tail 20
            fi

            # Show running containers
            echo "üìä Running containers:"
            docker ps --filter "name=phase2"

            # Clean up old images
            echo "üßπ Cleaning up old Docker images..."
            docker image prune -f
