name: CI/CD â†’ AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-24.04

    steps:
      # 1) Checkout your code
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Set up Node.js for testing
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      # 3) Install dependencies & run tests
      - name: Install dependencies
        run: npm ci
      - name: Run type check
        run: npm run type-check
      # - name: Run linting
      #   run: npm run lint

      # 4) Log in to Docker Hub
      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5) Build & push the Migration image
      - name: Build & Push Migration Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          target: migration
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:migration-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:migration-${{ github.sha }}

      # 6) Build & push the Production image
      - name: Build & Push Production Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile # explicitly reference your Dockerfile
          target: production
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:${{ github.sha }}

      # 7) Copy docker-compose file to EC2
      - name: Copy docker-compose to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "docker-compose.prod.yml"
          target: "~/app/"

      # 8) SSH into EC2 and deploy
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Create app directory structure and environment file
            mkdir -p ~/app/logs
            # Set proper permissions for logs directory (nodejs user UID 1001)
            sudo chown -R 1001:1001 ~/app/logs
            cat << 'EOF' > ~/app/.env
            ${{ secrets.PROD_ENV_FILE }}
            EOF

            # Navigate to app directory
            cd ~/app

            # Pull latest images
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:migration-latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:latest

            # Stop and remove existing containers using docker-compose
            docker-compose -f docker-compose.prod.yml down --remove-orphans 2>/dev/null || true

            # Set environment variables for Docker images
            export DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:latest
            export MIGRATION_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:migration-latest

            # Start PostgreSQL first
            docker-compose -f docker-compose.prod.yml up -d postgres

            # Wait for PostgreSQL to be ready
            echo "Waiting for PostgreSQL to be ready..."
            sleep 10

            # Run database migrations
            echo "Running database migrations..."
            docker run --rm \
              --network app_default \
              --env-file .env \
              $MIGRATION_IMAGE migrate

            # Check if seeding is required (you can control this via environment variable)
            if [ "${ENABLE_SEEDING:-false}" = "true" ]; then
              echo "Running database seeding..."
              docker run --rm \
                --network app_default \
                --env-file .env \
                $MIGRATION_IMAGE seed
            else
              echo "Seeding skipped (set ENABLE_SEEDING=true to enable)"
            fi

            # Start the main application
            docker-compose -f docker-compose.prod.yml up -d app

            # Wait for services to be ready
            sleep 15

            # Check application health
            curl -f http://localhost:8002/health || docker-compose -f docker-compose.prod.yml logs app --tail 20

            # Clean up old images
            docker image prune -f --filter "until=24h"
