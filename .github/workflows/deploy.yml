name: CI/CD â†’ AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-24.04

    steps:
      # 1) Checkout your code
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Set up Node.js for testing
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      # 3) Install dependencies & run tests
      - name: Install dependencies
        run: npm ci
      - name: Run type check
        run: npm run type-check
      # - name: Run linting
      #   run: npm run lint

      # 4) Verify Docker Authentication Setup
      - name: Verify Docker Authentication
        run: |
          chmod +x scripts/verify-docker-auth.sh
          ./scripts/verify-docker-auth.sh

      # 5) Log in to Docker Hub
      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6) Build & push the Docker image (using your Dockerfile)
      - name: Build & Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile # explicitly reference your Dockerfile
          target: production
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:${{ github.sha }}

      # 7) SSH into EC2 and deploy
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Create app directory and environment file
            mkdir -p ~/app
            cat << 'EOF' > ~/app/.env
            ${{ secrets.PROD_ENV_FILE }}
            EOF

            # Pull latest application image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:latest

            # Stop and remove existing containers
            docker stop h8-phase2-gc02-app 2>/dev/null || true
            docker rm h8-phase2-gc02-app 2>/dev/null || true

            # Stop and remove existing pg container
            docker stop h8-phase2-gc02-postgres 2>/dev/null || true
            docker rm h8-phase2-gc02-postgres 2>/dev/null || true

            # Start PostgreSQL if not running
            docker run -d \
              --name h8-phase2-gc02-postgres \
              --restart unless-stopped \
              -e POSTGRES_DB=h8_phase2_gc02 \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres \
              -v postgres_data:/var/lib/postgresql/data \
              -p 5432:5432 \
              postgres:15-alpine
            sleep 5

            # Start the main application
            docker run -d \
              --name h8-phase2-gc02-app \
              --restart unless-stopped \
              --env-file ~/app/.env \
              --link h8-phase2-gc02-postgres:postgres \
              -p 8002:8002 \
              -v ~/app/logs:/app/logs \
              ${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:latest

            # Wait and check health
            sleep 10
            curl -f http://localhost:8002/health || docker logs h8-phase2-gc02-app --tail 20

            # Clean up old images
            docker image prune -f --filter "until=24h"
