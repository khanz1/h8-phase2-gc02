name: CI/CD ‚Üí AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-24.04

    steps:
      # 1) Checkout your code
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Set up Node.js for testing
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      # 3) Install dependencies & run tests
      - name: Install dependencies
        run: npm ci
      - name: Run type check
        run: npm run type-check
      - name: Run linting
        run: npm run lint

      # 3.5) Prepare environment setup
      - name: Verify Environment Setup
        run: |
          # Verify env.example exists for reference
          ls -la env.example

      # 4) Log in to Docker Hub
      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5) Build & push the Docker image (using your Dockerfile)
      - name: Build & Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile # explicitly reference your Dockerfile
          target: production
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 6) SSH into EC2 and deploy
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Create app directory and environment file
            mkdir -p ~/app
            cat << 'EOF' > ~/app/.env
            ${{ secrets.PROD_ENV_FILE }}
            EOF

            # Ensure PORT is set to 8001
            echo "PORT=8001" >> ~/app/.env

            # Pull latest application image
            echo "üì• Pulling latest application image..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:latest

            # Stop and remove existing containers with better error handling
            echo "üîÑ Checking for existing containers..."
            if docker ps -a --format "table {{.Names}}" | grep -q "h8-phase2-gc02-app"; then
              echo "üõë Stopping existing h8-phase2-gc02-app container..."
              docker stop h8-phase2-gc02-app
              echo "üóëÔ∏è Removing existing h8-phase2-gc02-app container..."
              docker rm h8-phase2-gc02-app
            else
              echo "‚ÑπÔ∏è No existing h8-phase2-gc02-app container found (this is normal for first deployment)"
            fi

            # Start PostgreSQL if not running (for database functionality)
            if ! docker ps | grep -q h8-phase2-gc02-postgres; then
              echo "üöÄ Starting PostgreSQL database..."
              docker run -d \
                --name h8-phase2-gc02-postgres \
                --restart unless-stopped \
                -e POSTGRES_DB=h8_phase2_gc02 \
                -e POSTGRES_USER=postgres \
                -e POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} \
                -v postgres_data:/var/lib/postgresql/data \
                -p 5432:5432 \
                postgres:15-alpine
              
              # Wait for PostgreSQL to be ready
              echo "‚è≥ Waiting for PostgreSQL to be ready..."
              sleep 15
              echo "‚úÖ PostgreSQL setup completed"
            else
              echo "‚úÖ PostgreSQL already running"
            fi

            # Start the main application
            echo "üöÄ Starting h8-phase2-gc02 application..."
            docker run -d \
              --name h8-phase2-gc02-app \
              --restart unless-stopped \
              --env-file ~/app/.env \
              --link h8-phase2-gc02-postgres:postgres \
              -p 8001:8001 \
              -v ~/app/logs:/app/logs \
              ${{ secrets.DOCKERHUB_USERNAME }}/h8-phase2-gc02:latest

            # Wait for application to be ready
            echo "‚è≥ Waiting for application to be ready..."
            sleep 20

            # Check application health
            if curl -f http://localhost:8001/health > /dev/null 2>&1; then
              echo "‚úÖ Application is healthy and running on port 8001"
            else
              echo "‚ö†Ô∏è Application health check failed, checking logs..."
              docker logs h8-phase2-gc02-app --tail 20
            fi

            # Show running containers
            echo "üìä Running containers:"
            docker ps --filter "name=h8-phase2-gc02"

            # Clean up old images
            echo "üßπ Cleaning up old Docker images..."
            docker image prune -f --filter "until=24h"
